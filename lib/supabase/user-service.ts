import { supabase, type User } from "./client"

export class SupabaseUserService {
  async createUser(userData: {
    name: string
    email: string
    whatsapp: string
    location?: any
  }): Promise<User> {
    const { data, error } = await supabase.from("users").insert([userData]).select().single()

    if (error) {
      throw new Error(`Failed to create user: ${error.message}`)
    }

    return data
  }

  async getUserById(id: string): Promise<User | null> {
    const { data, error } = await supabase.from("users").select("*").eq("id", id).single()

    if (error) {
      if (error.code === "PGRST116") return null // Not found
      throw new Error(`Failed to get user: ${error.message}`)
    }

    return data
  }

  async getUserByEmail(email: string): Promise<User | null> {
    const { data, error } = await supabase.from("users").select("*").eq("email", email).single()

    if (error) {
      if (error.code === "PGRST116") return null // Not found
      throw new Error(`Failed to get user by email: ${error.message}`)
    }

    return data
  }

  async getAllUsers(): Promise<User[]> {
    const { data, error } = await supabase.from("users").select("*").order("created_at", { ascending: false })

    if (error) {
      throw new Error(`Failed to get users: ${error.message}`)
    }

    return data || []
  }

  async updateUser(id: string, updates: Partial<User>): Promise<User> {
    const { data, error } = await supabase.from("users").update(updates).eq("id", id).select().single()

    if (error) {
      throw new Error(`Failed to update user: ${error.message}`)
    }

    return data
  }

  async deleteUser(id: string): Promise<void> {
    try {
      console.log(`üóëÔ∏è Iniciando exclus√£o do usu√°rio: ${id}`)

      // Primeiro, verificar se o usu√°rio existe
      const { data: existingUser, error: checkError } = await supabase
        .from("users")
        .select("id, name, email")
        .eq("id", id)
        .single()

      if (checkError) {
        if (checkError.code === "PGRST116") {
          console.log(`‚ùå Usu√°rio ${id} n√£o encontrado`)
          throw new Error(`Usu√°rio n√£o encontrado`)
        }
        console.error(`‚ùå Erro ao verificar usu√°rio:`, checkError)
        throw new Error(`Erro ao verificar usu√°rio: ${checkError.message}`)
      }

      console.log(`‚úÖ Usu√°rio encontrado:`, existingUser)

      // Primeiro, tentar excluir todas as respostas do checklist deste usu√°rio
      console.log(`üóëÔ∏è Excluindo respostas do checklist para usu√°rio: ${id}`)
      const { error: answersError, count: deletedAnswers } = await supabase
        .from("checklist_answers")
        .delete()
        .eq("user_id", id)

      if (answersError) {
        console.warn(`‚ö†Ô∏è Aviso ao excluir respostas do checklist:`, answersError)
        // N√£o vamos falhar aqui, pois pode ser que o usu√°rio n√£o tenha respostas
      } else {
        console.log(`‚úÖ Respostas do checklist exclu√≠das. Count:`, deletedAnswers)
      }

      // Depois, excluir o usu√°rio
      console.log(`üóëÔ∏è Excluindo usu√°rio: ${id}`)
      const { error: userError, count: deletedUsers } = await supabase.from("users").delete().eq("id", id)

      if (userError) {
        console.error(`‚ùå Erro ao excluir usu√°rio:`, userError)
        throw new Error(`Failed to delete user: ${userError.message}`)
      }

      console.log(`‚úÖ Usu√°rio exclu√≠do com sucesso. Count:`, deletedUsers)

      // Verificar se realmente foi exclu√≠do
      const { data: verifyUser, error: verifyError } = await supabase.from("users").select("id").eq("id", id).single()

      if (verifyError && verifyError.code === "PGRST116") {
        console.log(`‚úÖ Confirmado: usu√°rio ${id} foi exclu√≠do do banco`)
      } else if (verifyUser) {
        console.error(`‚ùå PROBLEMA: usu√°rio ${id} ainda existe no banco!`)
        throw new Error(`Usu√°rio n√£o foi exclu√≠do do banco de dados`)
      }
    } catch (error) {
      console.error(`‚ùå Erro geral na exclus√£o do usu√°rio ${id}:`, error)
      throw error
    }
  }
}
